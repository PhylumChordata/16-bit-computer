const { vmTranslator } = require('./vm-translator.js');

describe('vmTranslator', () => {
  it('push local', () => {
    // Put value at local[2] to the stack
    expect(vmTranslator('push local 2')).toBe(
      [
        '@LCL',
        'D=M',
        '@2',
        'D=D+A',
        'A=D',

        'D=M',

        '@SP',
        'A=M',

        'M=D',

        '@SP',
        'M=M+1',
      ].join('\n')
    );
  });

  it('pop local', () => {
    // Pop a top value of the stack value to local[2]
    expect(vmTranslator('pop local 3')).toBe(
      [
        // load address of segment[index] to D
        '@LCL',
        'D=M',
        '@3',
        'D=D+A',

        // store address of segment[index] to R15
        '@R15',
        'M=D',

        // decrease stack pointer
        '@SP',
        'M=M-1',

        // read top stack value
        'A=M',
        'D=M',

        // move to segment[index]
        '@R15',
        'A=M',

        // set value to segment[index]
        'M=D',
      ].join('\n')
    );
  });

  it('push constant', () => {
    expect(vmTranslator('push constant 123')).toBe(
      ['@123', 'D=A', '@SP', 'A=M', 'M=D', '@SP', 'M=M+1'].join('\n')
    );
  });

  it('add', () => {
    expect(vmTranslator('add')).toBe(
      [
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'M=D+M',
        '@SP',
        'M=M+1',
      ].join('\n')
    );
  });

  it('sub', () => {
    expect(vmTranslator('sub')).toBe(
      [
        '@SP',
        'M=M-1',
        'A=M',
        'D=M', // D = y
        '@SP',
        'M=M-1',
        'A=M', // M = x
        'M=D-M', // y - x
        'M=-M', // y - x
        '@SP',
        'M=M+1',
      ].join('\n')
    );
  });

  it('and', () => {
    expect(vmTranslator('and')).toBe(
      [
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'M=D&M',
        '@SP',
        'M=M+1',
      ].join('\n')
    );
  });

  it('or', () => {
    expect(vmTranslator('or')).toBe(
      [
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'M=D|M',
        '@SP',
        'M=M+1',
      ].join('\n')
    );
  });

  it('integration', () => {
    expect(
      vmTranslator(`
push constant 17
push constant 17
eq
push constant 892
push constant 891
lt
push constant 32767
push constant 32766
gt
push constant 56
push constant 31
push constant 53
add
push constant 112
sub
neg
and
push constant 82
or
`)
    ).toBe(
      [
        '@17',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@17',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M-D',
        '@0/JUMP_EQ',
        'D;JEQ',
        '@SP',
        'A=M',
        'M=0',
        '@1/JUMP_NE',
        '0;JMP',
        '(0/JUMP_EQ)',
        '@SP',
        'A=M',
        'M=-1',
        '(1/JUMP_NE)',
        '@SP',
        'M=M+1',
        '@892',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@891',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M-D',
        '@2/JUMP_EQ',
        'D;JLE',
        '@SP',
        'A=M',
        'M=0',
        '@3/JUMP_NE',
        '0;JMP',
        '(2/JUMP_EQ)',
        '@SP',
        'A=M',
        'M=-1',
        '(3/JUMP_NE)',
        '@SP',
        'M=M+1',
        '@32767',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@32766',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M-D',
        '@4/JUMP_EQ',
        'D;JGT',
        '@SP',
        'A=M',
        'M=0',
        '@5/JUMP_NE',
        '0;JMP',
        '(4/JUMP_EQ)',
        '@SP',
        'A=M',
        'M=-1',
        '(5/JUMP_NE)',
        '@SP',
        'M=M+1',
        '@56',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@31',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@53',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'M=D+M',
        '@SP',
        'M=M+1',
        '@112',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'M=D-M',
        'M=-M',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'M=-M',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'M=D&M',
        '@SP',
        'M=M+1',
        '@82',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'M=D|M',
        '@SP',
        'M=M+1',
      ].join('\n')
    );
  });

  it('integration 2', () => {
    expect(
      vmTranslator(`
push constant 17
push constant 17
eq
push constant 17
push constant 16
eq
push constant 16
push constant 17
eq
push constant 892
push constant 891
lt
push constant 891
push constant 892
lt
push constant 891
push constant 891
lt
push constant 32767
push constant 32766
gt
push constant 32766
push constant 32767
gt
push constant 32766
push constant 32766
gt
push constant 57
push constant 31
push constant 53
add
push constant 112
sub
neg
and
push constant 82
or
not
`)
    ).toBe(
      [
        '@17',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@17',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M-D',
        '@0/JUMP_EQ',
        'D;JEQ',
        '@SP',
        'A=M',
        'M=0',
        '@1/JUMP_NE',
        '0;JMP',
        '(0/JUMP_EQ)',
        '@SP',
        'A=M',
        'M=-1',
        '(1/JUMP_NE)',
        '@SP',
        'M=M+1',
        '@17',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@16',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M-D',
        '@2/JUMP_EQ',
        'D;JEQ',
        '@SP',
        'A=M',
        'M=0',
        '@3/JUMP_NE',
        '0;JMP',
        '(2/JUMP_EQ)',
        '@SP',
        'A=M',
        'M=-1',
        '(3/JUMP_NE)',
        '@SP',
        'M=M+1',
        '@16',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@17',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M-D',
        '@4/JUMP_EQ',
        'D;JEQ',
        '@SP',
        'A=M',
        'M=0',
        '@5/JUMP_NE',
        '0;JMP',
        '(4/JUMP_EQ)',
        '@SP',
        'A=M',
        'M=-1',
        '(5/JUMP_NE)',
        '@SP',
        'M=M+1',
        '@892',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@891',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M-D',
        '@6/JUMP_EQ',
        'D;JLE',
        '@SP',
        'A=M',
        'M=0',
        '@7/JUMP_NE',
        '0;JMP',
        '(6/JUMP_EQ)',
        '@SP',
        'A=M',
        'M=-1',
        '(7/JUMP_NE)',
        '@SP',
        'M=M+1',
        '@891',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@892',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M-D',
        '@8/JUMP_EQ',
        'D;JLE',
        '@SP',
        'A=M',
        'M=0',
        '@9/JUMP_NE',
        '0;JMP',
        '(8/JUMP_EQ)',
        '@SP',
        'A=M',
        'M=-1',
        '(9/JUMP_NE)',
        '@SP',
        'M=M+1',
        '@891',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@891',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M-D',
        '@10/JUMP_EQ',
        'D;JLE',
        '@SP',
        'A=M',
        'M=0',
        '@11/JUMP_NE',
        '0;JMP',
        '(10/JUMP_EQ)',
        '@SP',
        'A=M',
        'M=-1',
        '(11/JUMP_NE)',
        '@SP',
        'M=M+1',
        '@32767',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@32766',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M-D',
        '@12/JUMP_EQ',
        'D;JGT',
        '@SP',
        'A=M',
        'M=0',
        '@13/JUMP_NE',
        '0;JMP',
        '(12/JUMP_EQ)',
        '@SP',
        'A=M',
        'M=-1',
        '(13/JUMP_NE)',
        '@SP',
        'M=M+1',
        '@32766',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@32767',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M-D',
        '@14/JUMP_EQ',
        'D;JGT',
        '@SP',
        'A=M',
        'M=0',
        '@15/JUMP_NE',
        '0;JMP',
        '(14/JUMP_EQ)',
        '@SP',
        'A=M',
        'M=-1',
        '(15/JUMP_NE)',
        '@SP',
        'M=M+1',
        '@32766',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@32766',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M-D',
        '@16/JUMP_EQ',
        'D;JGT',
        '@SP',
        'A=M',
        'M=0',
        '@17/JUMP_NE',
        '0;JMP',
        '(16/JUMP_EQ)',
        '@SP',
        'A=M',
        'M=-1',
        '(17/JUMP_NE)',
        '@SP',
        'M=M+1',
        '@57',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@31',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@53',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'M=D+M',
        '@SP',
        'M=M+1',
        '@112',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'M=D-M',
        'M=-M',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'M=-M',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'M=D&M',
        '@SP',
        'M=M+1',
        '@82',
        'D=A',
        '@SP',
        'A=M',
        'M=D',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'D=M',
        '@SP',
        'M=M-1',
        'A=M',
        'M=D|M',
        '@SP',
        'M=M+1',
        '@SP',
        'M=M-1',
        'A=M',
        'M=!M',
        '@SP',
        'M=M+1',
      ].join('\n')
    );
  });
});
